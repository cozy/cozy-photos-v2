// Generated by CoffeeScript 1.10.0
var Helpers, Photo, async, cozydb, fs, log,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

cozydb = require('cozydb');

async = require('async');

fs = require('fs');

Helpers = require('../helpers/thumb');

log = require('printit')({
  date: true,
  prefix: "model:photo"
});

module.exports = Photo = (function(superClass) {
  extend(Photo, superClass);

  function Photo() {
    return Photo.__super__.constructor.apply(this, arguments);
  }

  Photo.schema = {
    id: String,
    title: String,
    description: String,
    orientation: Number,
    binary: cozydb.NoSchema,
    _attachments: Object,
    albumid: String,
    date: String,
    gps: Object
  };

  Photo.fromAlbum = function(album, callback) {
    var params;
    if (album.folderid === "all") {
      return Photo.request('all', {}, callback);
    } else {
      params = {
        startkey: [album.id],
        endkey: [album.id + "0"]
      };
      return Photo.request('byalbum', params, callback);
    }
  };

  Photo.patchGps = function(callback) {
    return Photo.fromAlbum({
      folderId: "all"
    }, function(err, photos) {
      if (err != null) {
        return callback(err);
      }
      return async.eachSeries(photos, function(photo, next) {
        if ((photo.binary != null) && !((photo.gps != null) && (photo.date != null))) {
          return photo.extractGpsFromBinary(next);
        } else {
          return setImmediate(next);
        }
      }, callback);
    });
  };

  Photo.prototype.extractGpsFromBinary = function(callback) {
    var kind, res;
    kind = this.binary.raw ? 'raw' : 'file';
    res = this.getBinary(kind, function(err) {
      if (err != null) {
        return log.error(err);
      }
    });
    return res.on('ready', (function(_this) {
      return function(stream) {
        return Helpers.readMetadata(stream, function(err, data) {
          if (err != null) {
            log.error("Error reading metadata of " + _this.id + " / " + _this.title);
            log.error(err);
            return callback();
          } else {
            return _this.updateAttributes({
              gps: data.exif.gps,
              date: data.exif.date
            }, function(err) {
              if (err != null) {
                log.error(err);
              }
              return callback();
            });
          }
        });
      };
    })(this));
  };

  Photo.albumsThumbs = function(callback) {
    var params;
    params = {
      reduce: true,
      group: true
    };
    return Photo.rawRequest('albumphotos', params, function(err, results) {
      var i, len, out, result;
      if (err) {
        return callback(err);
      }
      out = {};
      for (i = 0, len = results.length; i < len; i++) {
        result = results[i];
        out[result.key] = result.value;
      }
      return callback(null, out);
    });
  };

  Photo.prototype.destroyWithBinary = function(callback) {
    var binaries;
    if ((this.binary != null) && typeof this.binary === 'object') {
      binaries = Object.keys(this.binary);
      return async.eachSeries(binaries, (function(_this) {
        return function(bin, cb) {
          return _this.removeBinary(bin, function(err) {
            if (err) {
              log.error("Cannot destroy binary linked to photo " + _this.id);
            }
            return cb();
          });
        };
      })(this), (function(_this) {
        return function(err) {
          return _this.destroy(callback);
        };
      })(this));
    } else {
      return this.destroy(callback);
    }
  };

  return Photo;

})(cozydb.CozyModel);
