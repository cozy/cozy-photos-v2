// Generated by CoffeeScript 1.10.0
var fs, gm, gpsDegToDec, log, mime, thumb, whiteList;

fs = require('fs');

gm = require('gm');

mime = require('mime');

log = require('printit')({
  prefix: 'thumbnails'
});

whiteList = ['image/jpeg', 'image/png'];

gpsDegToDec = function(pos, posRef) {
  var coord, ref, split, splitAlt;
  split = pos.match(/(\d+)\/(\d+), (\d+)\/(\d+), (\d+)\/(\d+)/);
  if (split != null ? split[6] : void 0) {
    coord = split[1] / split[2] + (split[3] / split[4]) / 60 + (split[5] / split[6]) / 3600;
  } else {
    splitAlt = pos.match(/(\d+)\/(\d+)/);
    if (splitAlt != null) {
      coord = splitAlt[1] / splitAlt[2];
    }
  }
  ref = posRef === 'S' || posRef === 'W' ? -1 : 1;
  if (coord != null) {
    return ref * coord;
  }
};

module.exports = thumb = {
  readMetadata: function(filePath, callback) {
    return gm(filePath).options({
      imageMagick: true
    }).identify(function(err, data) {
      var GPS, alt, lat, long, metadata, orientation, ref1, ref2, ref3;
      if (err) {
        return callback(err);
      } else {
        orientation = data.Orientation;
        alt = 'exif:GPSAltitude';
        lat = 'exif:GPSLatitude';
        long = 'exif:GPSLongitude';
        GPS = {};
        if (data.Properties[alt]) {
          GPS.alt = gpsDegToDec(data.Properties[alt], data.Properties[alt + 'Ref']);
        }
        if (data.Properties[lat]) {
          GPS.lat = gpsDegToDec(data.Properties[lat], data.Properties[lat + 'Ref']);
        }
        if (data.Properties[long]) {
          GPS.long = gpsDegToDec(data.Properties[long], data.Properties[long + 'Ref']);
        }
        if (!(orientation != null) || data.Orientation === 'Undefined') {
          orientation = 1;
        }
        metadata = {
          exif: {
            orientation: orientation,
            date: (ref1 = (ref2 = (ref3 = data.Properties['exif:DateTimeOriginal']) != null ? ref3 : data.Properties['exif:DateTimeDigitized']) != null ? ref2 : data.Properties['exif:DateTime']) != null ? ref1 : data.Properties['date:create'],
            gps: GPS
          }
        };
        return callback(null, metadata);
      }
    });
  },
  attachFile: function(file, dstPath, name, callback) {
    return file.attachBinary(dstPath, {
      name: name
    }, function(err) {
      return fs.unlink(dstPath, function(unlinkErr) {
        if (err) {
          console.log(unlinkErr);
        }
        return callback(err);
      });
    });
  },
  resize: function(srcPath, file, name, callback) {
    var attachFile, buildThumb, dstPath, err, error, gmRunner;
    dstPath = "/tmp/2-" + file.id;
    try {
      attachFile = function(err) {
        if (err) {
          return callback(err);
        } else {

        }
      };
      gmRunner = gm(srcPath).options({
        imageMagick: true
      });
      if (name === 'thumb') {
        buildThumb = function(width, height) {
          return gmRunner.resize(width, height).crop(300, 300, 0, 0).write(dstPath, function(err) {
            if (err) {
              return callback(err);
            } else {
              return thumb.attachFile(file, dstPath, name, callback);
            }
          });
        };
        return gmRunner.size(function(err, data) {
          if (err) {
            return callback(err);
          } else {
            if (data.width > data.height) {
              return buildThumb(null, 300);
            } else {
              return buildThumb(300, null);
            }
          }
        });
      } else if (name === 'screen') {
        return gmRunner.resize(1200, 800).write(dstPath, function(err) {
          if (err) {
            return callback(err);
          } else {
            return thumb.attachFile(file, dstPath, name, callback);
          }
        });
      }
    } catch (error) {
      err = error;
      console.log(err);
      return callback(err);
    }
  }
};
