// Generated by CoffeeScript 1.10.0
var File, Photo, async, download, fileByPage, fs, log, onThumbCreation, thumbHelpers;

File = require('../models/file');

Photo = require('../models/photo');

async = require('async');

fs = require('fs');

thumbHelpers = require('../helpers/thumb');

log = require('printit')({
  date: true,
  prefix: "file"
});

onThumbCreation = require('../helpers/initializer').onThumbCreation;

fileByPage = 5 * 12;

module.exports.fetch = function(req, res, next, id) {
  if (id.indexOf('.jpg') > 0) {
    id = id.substring(0, id.length - 4);
  }
  return File.find(id, function(err, file) {
    if (err) {
      return next(err);
    } else if (!file) {
      err = new Error("File " + id + " not found");
      err.status = 404;
      return next(err);
    } else {
      req.file = file;
      return next();
    }
  });
};

module.exports.list = function(req, res, next) {
  var dates, options, skip;
  if (req.params.page != null) {
    skip = parseInt(req.params.page) * fileByPage;
  } else {
    skip = 0;
  }
  dates = {};
  options = {
    limit: fileByPage + 1,
    skip: skip,
    descending: true
  };
  return File.imageByDate(options, function(err, photos) {
    var date, hasNext, i, len, mounth, photo;
    if (err) {
      return next(err);
    }
    if (photos.length === fileByPage + 1) {
      hasNext = true;
    } else {
      hasNext = false;
    }
    photos.splice(fileByPage, 1);
    for (i = 0, len = photos.length; i < len; i++) {
      photo = photos[i];
      date = new Date(photo.lastModification);
      mounth = date.getMonth() + 1;
      mounth = mounth > 9 ? "" + mounth : "0" + mounth;
      date = (date.getFullYear()) + "-" + mounth;
      if (dates[date] != null) {
        dates[date].push(photo);
      } else {
        dates[date] = [photo];
      }
    }
    return res.send({
      files: dates,
      hasNext: hasNext
    });
  });
};

module.exports.thumb = function(req, res, next) {
  var stream, which;
  if (res.connection && !res.connection.destroyed) {
    which = req.file.binary.thumb ? 'thumb' : 'file';
    stream = req.file.getBinary(which, function(err) {
      if (err) {
        return next(err);
      }
    });
    stream.pipe(res);
    return res.on('close', function() {
      return stream.abort();
    });
  }
};

download = function(res, file, rawFile, callback) {
  var stream;
  if (res.connection && !res.connection.destroyed) {
    fs.openSync(rawFile, 'w');
    stream = file.getBinary('file', callback);
    stream.pipe(fs.createWriteStream(rawFile));
    return res.on('close', function() {
      return stream.abort();
    });
  }
};

module.exports.createPhoto = function(req, res, next) {
  var file, photo;
  file = req.file;
  if (file.binary == null) {
    return next(new Error('no binary'));
  }
  photo = {
    date: file.lastModification,
    title: "",
    description: "",
    orientation: 1,
    albumid: "" + req.body.albumid,
    binary: file.binary
  };
  return Photo.create(photo, function(err, photo) {
    var rawFile, ref;
    if (err != null) {
      log.error("Error creating photo from file " + file.id);
      log.raw(err);
      return next(err);
    }
    photo.extractGpsFromBinary(function() {});
    if ((((ref = photo.binary) != null ? ref.thumb : void 0) != null) && (photo.binary.screen != null)) {
      return res.status(201).send(photo);
    } else {
      rawFile = "/tmp/" + photo.id;
      return download(res, file, rawFile, function(err) {
        if (err != null) {
          log.error("Error downloading photo from file " + file.id);
          log.raw(err);
          return fs.unlink(rawfile(function() {
            return next(err);
          }));
        } else {
          if (photo.binary.thumb == null) {
            return thumbHelpers.resize(rawFile, photo, 'thumb', function(err) {
              if (err != null) {
                log.error("Error resizing thumb " + photo.id);
                log.raw(err);
                return fs.unlink(rawfile(function() {
                  return next(err);
                }));
              } else {
                return thumbHelpers.resize(rawFile, photo, 'screen', function(err) {
                  if (err != null) {
                    log.error("Error resizing screen " + photo.id);
                    log.raw(err);
                  }
                  return fs.unlink(rawFile, function() {
                    return res.status(201).send(photo);
                  });
                });
              }
            });
          } else if (photo.binary.screen == null) {
            return thumbHelpers.resize(rawFile, photo, 'screen', function(err) {
              if (err != null) {
                log.error("Error resizing screen " + photo.id);
                log.raw(err);
              }
              return fs.unlink(rawFile, function() {
                return res.status(201).send(photo);
              });
            });
          }
        }
      });
    }
  });
};
